name: Deploy Application Docker Image to EC2 Instance

on:
  push:
    branches:
      - main   # Change this to the branch you want to trigger the pipeline from

env:
  AWS_REGION: 'eu-north-1'  # Your AWS region (e.g., 'eu-north-1')
  IMAGE_NAME: 'latest'     # Image name (can be overridden)
  ECR_REPO: ${{ secrets.ECR_REPO }}  # ECR repository URL (set in GitHub Secrets)
  IMAGE_TAG: ${{ github.sha }}  # Use the commit SHA as the image tag

jobs:
  # Continuous Integration Job - Build, Tag, Push Docker Image to ECR
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI and configure AWS credentials
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Login to AWS ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      # Step 5: Tag the Docker image for the ECR repository
      - name: Tag Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}

      # Step 6: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}

  # Continuous Deployment Job - Pull Docker image and run on EC2 instance
  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted  # Use self-hosted EC2 instance as runner

    steps:
      # Step 1: Checkout code from the repository (required for self-hosted runner)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI and configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Log in to AWS ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      # Step 4: Pull the Docker image from ECR and run it on EC2
      - name: Pull Docker image from ECR and deploy to EC2
        run: |
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}
          docker run -d -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_DEFAULT_REGION="${{ env.AWS_REGION }}" \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -p 8080:8080 \
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}
